.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.16.
.TH PYTHON "1" "November 2020" "Python 3.9.0+" "User Commands"
.SH NAME
Python \- manual page for vtkPython 3.9.0+ : VTK-Wrapper for Python
.SH DESCRIPTION
usage: /usr/bin/../lib/x86_64\-linux\-gnu/vtkpython [option] ... [\-c cmd | \fB\-m\fR mod | file | \fB\-]\fR [arg] ...
Options and arguments (and corresponding environment variables):
\fB\-b\fR     : issue warnings about str(bytes_instance), str(bytearray_instance)
.IP
and comparing bytes/bytearray with str. (\fB\-bb\fR: issue errors)
.PP
\fB\-B\fR     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x
\fB\-c\fR cmd : program passed in as string (terminates option list)
\fB\-d\fR     : debug output from parser; also PYTHONDEBUG=x
\fB\-E\fR     : ignore PYTHON* environment variables (such as PYTHONPATH)
\fB\-h\fR     : print this help message and exit (also \fB\-\-help\fR)
\fB\-i\fR     : inspect interactively after running script; forces a prompt even
.IP
if stdin does not appear to be a terminal; also PYTHONINSPECT=x
.PP
\fB\-I\fR     : isolate Python from the user's environment (implies \fB\-E\fR and \fB\-s\fR)
\fB\-m\fR mod : run library module as a script (terminates option list)
\fB\-O\fR     : remove assert and __debug__\-dependent statements; add .opt\-1 before
.IP
\&.pyc extension; also PYTHONOPTIMIZE=x
.PP
\fB\-OO\fR    : do \fB\-O\fR changes and also discard docstrings; add .opt\-2 before
.IP
\&.pyc extension
.PP
\fB\-q\fR     : don't print version and copyright messages on interactive startup
\fB\-s\fR     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
\fB\-S\fR     : don't imply 'import site' on initialization
\fB\-u\fR     : force the stdout and stderr streams to be unbuffered;
.IP
this option has no effect on stdin; also PYTHONUNBUFFERED=x
.PP
\fB\-v\fR     : verbose (trace import statements); also PYTHONVERBOSE=x
.IP
can be supplied multiple times to increase verbosity
.PP
\fB\-V\fR     : print the Python version number and exit (also \fB\-\-version\fR)
.IP
when given twice, print more information about the build
.PP
\fB\-W\fR arg : warning control; arg is action:message:category:module:lineno
.IP
also PYTHONWARNINGS=arg
.PP
\fB\-x\fR     : skip first line of source, allowing use of non\-Unix forms of #!cmd
\fB\-X\fR opt : set implementation\-specific option. The following options are available:
.HP
\fB\-X\fR faulthandler: enable faulthandler
.HP
\fB\-X\fR oldparser: enable the traditional LL(1) parser; also PYTHONOLDPARSER
.HP
\fB\-X\fR showrefcount: output the total reference count and number of used
.IP
memory blocks when the program finishes or after each statement in the
interactive interpreter. This only works on debug builds
.HP
\fB\-X\fR tracemalloc: start tracing Python memory allocations using the
.IP
tracemalloc module. By default, only the most recent frame is stored in a
traceback of a trace. Use \fB\-X\fR tracemalloc=NFRAME to start tracing with a
traceback limit of NFRAME frames
.HP
\fB\-X\fR importtime: show how long each import takes. It shows module name,
.IP
cumulative time (including nested imports) and self time (excluding
nested imports). Note that its output may be broken in multi\-threaded
application. Typical usage is python3 \fB\-X\fR importtime \fB\-c\fR 'import asyncio'
.HP
\fB\-X\fR dev: enable CPython's "development mode", introducing additional runtime
.IP
checks which are too expensive to be enabled by default. Effect of the
developer mode:
.IP
* Add default warning filter, as \fB\-W\fR default
* Install debug hooks on memory allocators: see the PyMem_SetupDebugHooks() C function
* Enable the faulthandler module to dump the Python traceback on a crash
* Enable asyncio debug mode
* Set the dev_mode attribute of sys.flags to True
* io.IOBase destructor logs close() exceptions
.HP
\fB\-X\fR utf8: enable UTF\-8 mode for operating system interfaces, overriding the default
.IP
locale\-aware mode. \fB\-X\fR utf8=0 explicitly disables UTF\-8 mode (even when it would
otherwise activate automatically)
.HP
\fB\-X\fR pycache_prefix=PATH: enable writing .pyc files to a parallel tree rooted at the
.IP
given directory instead of to the code tree
.SS "--check-hash-based-pycs always|default|never:"
.IP
control how Python invalidates hash\-based .pyc files
.PP
file   : program read from script file
\-      : program read from stdin (default; interactive mode if a tty)
arg ...: arguments passed to program in sys.argv[1:]
.PP
Other environment variables:
PYTHONSTARTUP: file executed on interactive startup (no default)
PYTHONPATH   : ':'\-separated list of directories prefixed to the
.TP
default module search path.
The result is sys.path.
.PP
PYTHONHOME   : alternate <prefix> directory (or <prefix>:<exec_prefix>).
.IP
The default module search path uses <prefix>/lib/pythonX.X.
.PP
PYTHONPLATLIBDIR : override sys.platlibdir.
PYTHONCASEOK : ignore case in 'import' statements (Windows).
PYTHONUTF8: if set to 1, enable the UTF\-8 mode.
PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
PYTHONFAULTHANDLER: dump the Python traceback on fatal errors.
PYTHONHASHSEED: if this variable is set to 'random', a random value is used
.TP
to seed the hashes of str and bytes objects.
It can also be set to an
.IP
integer in the range [0,4294967295] to get hash values with a
predictable seed.
.PP
PYTHONMALLOC: set the Python memory allocators and/or install debug hooks
.IP
on Python memory allocators. Use PYTHONMALLOC=debug to install debug
hooks.
.PP
PYTHONCOERCECLOCALE: if this variable is set to 0, it disables the locale
.IP
coercion behavior. Use PYTHONCOERCECLOCALE=warn to request display of
locale coercion and locale compatibility warnings on stderr.
.PP
PYTHONBREAKPOINT: if this variable is set to 0, it disables the default
.IP
debugger. It can be set to the callable of your debugger of choice.
.PP
PYTHONDEVMODE: enable the development mode.
PYTHONPYCACHEPREFIX: root directory for bytecode cache (pyc) files.
.SH "SEE ALSO"
The full documentation for
.B Python
is maintained as a Texinfo manual.  If the
.B info
and
.B Python
programs are properly installed at your site, the command
.IP
.B info Python
.PP
should give you access to the complete manual.
